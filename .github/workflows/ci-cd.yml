name: Release and Build
on:
  push:
    branches:
      - main
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Semantic Release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/commit-analyzer @semantic-release/release-notes-generator
      - name: Get tag before release
        id: tag_before
        run: |
          TAG_BEFORE=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag_before=$TAG_BEFORE" >> $GITHUB_OUTPUT
      - name: Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release
          TAG_AFTER=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          TAG_BEFORE="${{ steps.tag_before.outputs.tag_before }}"
          if [ "$TAG_AFTER" != "$TAG_BEFORE" ] && [ -n "$TAG_AFTER" ]; then
            echo "released=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_AFTER" >> $GITHUB_OUTPUT
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "tag_name=" >> $GITHUB_OUTPUT
          fi
  build-executables:
    needs: release
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    - name: Build executable
      run: pyinstaller --onefile --name "package-windows" main.py
    - name: Upload executable to release
      if: needs.release.outputs.released == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/package-windows.exe
        tag_name: ${{ needs.release.outputs.tag_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: package-windows
        path: dist/package-windows.exe
